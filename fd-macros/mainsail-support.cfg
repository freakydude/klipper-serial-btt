# Copyright (C) 2023 Frank Roth <developer@freakydude.de>

# Internal G-Code macros to support the
# basic features needed for BigTreeTech-TouchscreenFirmware (https://github.com/bigtreetech/BIGTREETECH-TouchScreenFirmware) 
# in combination with Mainsail frontend

# These are not called directly, but are encapsuled by macros defined in macros-examles.cfg or by your individual implementation.

[gcode_macro _FD_RUN_IDLE_TIMEOUT]
description:  Internal
  Starts if idle timeout has expired
  triggered by klipper
gcode:
  {% if printer.pause_resume.is_paused %}
    SET_GCODE_VARIABLE MACRO=_FD_RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"  
    
    M117 Idle timeout, hotend cooldown
    _SEND_TO_BTT MESSAGE="Idle timeout, hotend cooldown"

    M104 S0  # cooldown the hotend
  {% else %}
    M117 Idle timeout, poweroff
    _SEND_TO_BTT MESSAGE="Idle timeout, poweroff"
    
    # Shutdown
    TURN_OFF_HEATERS
    M84
  {% endif %}

[gcode_macro _FD_SET_PAUSE_NEXT_LAYER]
description: Enable a pause if the next layer is reached
  triggered by mainsail
variable_enabled: 0
gcode:
  {% set ENABLE = params.ENABLE | int %}

  {% if params.ENABLE is defined %}
    SET_GCODE_VARIABLE MACRO=_FD_SET_PAUSE_NEXT_LAYER VARIABLE=enabled VALUE="{ENABLE}"
  {% endif %}

[gcode_macro _FD_SET_PAUSE_AT_LAYER]
description: Enable/disable a pause if a given layer number is reached
  triggered by mainsail
variable_enabled: 0
variable_layer: 0
gcode:
  {% set ENABLE = params.ENABLE | int %}
  {% set LAYER = params.LAYER | int %}
  
  {% if params.ENABLE is defined %}
    SET_GCODE_VARIABLE MACRO=_FD_SET_PAUSE_AT_LAYER VARIABLE=enabled VALUE="{ENABLE}"
  {% endif %}

  {% if params.LAYER is defined %}
    SET_GCODE_VARIABLE MACRO=_FD_SET_PAUSE_AT_LAYER VARIABLE=layer VALUE="{LAYER}"
  {% endif %}

[gcode_macro _FD_SET_PRINT_STATS_INFO]
description: Internal
  Enables mainsail and display features
  triggered by slicer
gcode:
  {% set CURRENT_LAYER = params.CURRENT_LAYER | default(0) | int %}

  {% if params.CURRENT_LAYER is defined %}
    _BTT_NOTIFY_LAYERLEFT CURRENT={CURRENT_LAYER} MAX={printer.print_stats.info.total_layer | default(0) | int} 
  {% endif %}

[gcode_macro _FD_PAUSE]
description: Internal
  Pause the current running print
  triggered by mainsail
gcode:
  SAVE_GCODE_STATE NAME=_fd_pause_resume_state 
  SAVE_GCODE_STATE NAME=_fd_pause_state 

  _BTT_PAUSE
  # save extruder temperature
  SET_GCODE_VARIABLE MACRO=_FD_RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"  
  
  M83
  G1 E-1 F2700

  _FD_PARK

  RESTORE_GCODE_STATE NAME=_fd_pause_state

[gcode_macro _FD_RESUME]
description: Internal
  Resume the current running print
  triggered by mainsail
variable_last_extruder_temp: 0
gcode:
  SAVE_GCODE_STATE NAME=_fd_resume_state 

  _BTT_RESUME

  # restore extruder temperature
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={last_extruder_temp}
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={last_extruder_temp*0.98} MAXIMUM={last_extruder_temp*1.02}

  M83
  G1 E1.5 F2700

  RESTORE_GCODE_STATE NAME=_fd_resume_state 
  RESTORE_GCODE_STATE NAME=_fd_pause_resume_state MOVE=1

[gcode_macro _FD_CANCEL_PRINT]
description: Internal
  Cancel the current running print
  triggered by mainsail
variable_park: True
gcode:
  _BTT_CANCEL
  _FD_STOP_PRINT

[gcode_macro _FD_START_PRINT]
description: Internal 
  Startcode to prepare a new printing
  triggered by slicer 
gcode:
  # Reset states
  CLEAR_PAUSE
  SAVE_GCODE_STATE NAME=_fd_ready_print_state
  SET_GCODE_VARIABLE MACRO=M73 VARIABLE=progress_supported VALUE=0

  _BTT_START
  _FD_SET_PRINT_STATS_INFO

[gcode_macro _FD_END_PRINT]
description: Internal
  Endcode to finalize made printing
  triggered by slicer 
gcode:
  _BTT_END
  _FD_STOP_PRINT

[gcode_macro _FD_STOP_PRINT]
description: Common code for cancel/end print
gcode:  
  _FD_PARK
  TURN_OFF_HEATERS
  M106 S0 # Turn of extruder-fan
  CLEAR_PAUSE

  RESTORE_GCODE_STATE NAME=_fd_ready_print_state 

[gcode_macro _FD_PARK]
gcode:
  SAVE_GCODE_STATE NAME=_fd_park_state 

  {% set PARK_X = printer.toolhead.axis_maximum.x | float %}
  {% set PARK_Y = printer.toolhead.axis_maximum.y | float %}
  {% set PARK_Z = printer.toolhead.position.z + 50.0 | float %}

  {% if PARK_Z > printer.toolhead.axis_maximum.z %}
    {% set PARK_Z = printer.toolhead.axis_maximum.z %}
  {% endif %}

  G90 # use absolute coordinates  
  G1 Z{PARK_Z} E-1 F450
  G1 X{PARK_X} Y{PARK_Y} F4500 # move to corner of the bed to avoid ooze over centre

  RESTORE_GCODE_STATE NAME=_fd_park_state 

[gcode_macro _FD_PRIME_LINE]
description: Draws and cleans the nozzel on start printing
gcode: 
  SAVE_GCODE_STATE NAME=_fd_prime_line_state

  M117 Primeline

  G90 # use absolute coordinates  
  G1 X0.5 Y10 F4500.0 ; move to start-line position
  M82 # E Absolute
  G92 E0 ; Reset Extruder
  G1 X0.5 Y10 Z0.25 F3000.0 ; Move to start position
  G1 X0.5 Y110 Z0.25 F1500.0 E10 ; Draw the first line
  G1 X0.2 Y110 Z0.25 F3000.0 ; Move to side a little
  G1 X0.2 Y10 Z0.25 F1500.0 E20 ; Draw the second line

  G91 # use relative coordinates
  G1 Z0.25 F3000 ; move z up little to prevent scratching of surface  

  G92 E0 ; Reset Extruder

  RESTORE_GCODE_STATE NAME=_fd_prime_line_state 

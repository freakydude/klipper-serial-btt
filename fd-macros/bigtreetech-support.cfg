# Copyright (C) 2023 Frank Roth <developer@freakydude.de>

# Basic implementation of the gcodes needed by 
# BigTreeTech-TouchscreenFirmware (https://github.com/bigtreetech/BIGTREETECH-TouchScreenFirmware)
# Used in Touch Mode

[gcode_macro G29]
description: Bed Leveling 
gcode:
  BED_MESH_CLEAR
  BED_MESH_CALIBRATE=default

[gcode_macro M27]
description: Report SD print status
rename_existing: M27.1
variable_last_interval: 0
gcode:
  {% set INTERVAL = params.S | default(0) | float  %} #Interval between auto-reports. S0 to disable.
  {% set FILE = params.C   %} #Interval between auto-reports. S0 to disable.

  M27.1 {rawparams}

  SET_GCODE_VARIABLE MACRO=M27 VARIABLE=last_interval VALUE={INTERVAL}
  UPDATE_DELAYED_GCODE ID=_SD_STATUS_AUTO_REPORT DURATION={INTERVAL}

[gcode_macro M33]
description: Get Long Path
  Get the long name for a file based on the DOS 8.3 path.
gcode:
  _SEND_TO_BTT COMMAND="{rawparams}"

[gcode_macro M73]
rename_existing: M73.1
variable_last_minutes: 0.0
gcode: 
  {% set PROGRESS = params.P | default(0.0) | float  %}
  {% set MINUTES = params.R | default(0.0) | float  %}

  {% if last_minutes != MINUTES %} # update display timeleft only if input changed
    {% set MINUTES_FLOOR = MINUTES | round(0,'floor' ) | int %}
    {% set SECONDS = ((MINUTES-MINUTES_FLOOR)*60) | round(0,'floor' ) | int %} 
    {% set HOURS = (MINUTES_FLOOR // 60) | round(0,'floor' ) | int %} 
    {% set MINUTES_REST = (MINUTES_FLOOR-HOURS*60) | round(0,'floor' ) | int %}

    {% if params.R is defined %}
      _BTT_NOTIFY_TIMELEFT TIMELEFT="{HOURS~"h"~MINUTES_REST~"m"~SECONDS~"s"}"
      SET_GCODE_VARIABLE MACRO=M73 VARIABLE=last_minutes VALUE={MINUTES}
    {% endif %}     
  {% endif %}

  M73.1 {rawparams}

[gcode_macro M81]
description: Power Off
gcode:
  M117 M81 Shutdown: {params}
  TURN_OFF_HEATERS
  M84
  
#[gcode_macro M92]
#description: Set Axis Steps-per-unit
#  Use M92 to set the steps-per-unit for one or more axes. This setting affects how many steps will be done for each unit of movement.
#gcode:
#  M117 NotImplemented - M92 Set Axis Steps-per-unit: {params}

[gcode_macro M106]
description: Set Fan Speed
  Turn on one of the fans and set its speed. 
  If no fan index is given, the print cooling fan is selected. 
  The fan speed applies to the next block added to the planner, so it will not take effect until previous moves in the planner are done. 
  Under manual control with an idle machine, M106 will change the fan speed immediately.
rename_existing: M106.1
gcode:
  {% set PERCENTAGE = params.S | default(0) | int %}
  
  M106.1 {rawparams}
  _SEND_TO_BTT COMMAND="M106 S{PERCENTAGE}"

[gcode_macro M108]
description: Break and Continue
gcode:
  CANCEL_PRINT

[gcode_macro M112]
description: Emergency Stop
rename_existing: M112.1
gcode:
  _SEND_TO_BTT ERROR="Emergency Stop"
  M112.1 {rawparams}
  FIRMWARE_RESTART

[gcode_macro M115]
description: Firmware info and capabilities
rename_existing: M115.1
gcode:
  # M115.1 {rawparams} # FIRMWARE_NAME:Klipper FIRMWARE_VERSION:v0.11.0-143-gc54d83c9 
  _SEND_TO_BTT COMMAND="FIRMWARE_NAME:Klipper {printer.mcu.mcu_version} SOURCE_CODE_URL:https://github.com/Klipper3d/klipper PROTOCOL_VERSION:1.0 MACHINE_TYPE:Sidewinder X2"
  #_SEND_TO_BTT COMMAND="FIRMWARE_NAME:Marlin SOURCE_CODE_URL:https://github.com/Klipper3d/klipper PROTOCOL_VERSION:1.0 MACHINE_TYPE:Sidewinder X2"
  _SEND_TO_BTT COMMAND="Cap:EEPROM:1"
  _SEND_TO_BTT COMMAND="Cap:AUTOREPORT_TEMP:1"
  _SEND_TO_BTT COMMAND="Cap:AUTOREPORT_POS:1"
  _SEND_TO_BTT COMMAND="Cap:AUTOLEVEL:1"
  _SEND_TO_BTT COMMAND="Cap:Z_PROBE:1"
  _SEND_TO_BTT COMMAND="Cap:LEVELING_DATA:0"
  _SEND_TO_BTT COMMAND="Cap:SOFTWARE_POWER:0"
  _SEND_TO_BTT COMMAND="Cap:TOGGLE_LIGHTS:0"
  _SEND_TO_BTT COMMAND="Cap:CASE_LIGHT_BRIGHTNESS:0"
  _SEND_TO_BTT COMMAND="Cap:EMERGENCY_PARSER:1"
  _SEND_TO_BTT COMMAND="Cap:PROMPT_SUPPORT:0"
  _SEND_TO_BTT COMMAND="Cap:SDCARD:1"
  _SEND_TO_BTT COMMAND="Cap:MULTI_VOLUME:0"
  _SEND_TO_BTT COMMAND="Cap:AUTOREPORT_SD_STATUS:1"
  _SEND_TO_BTT COMMAND="Cap:LONG_FILENAME:1"
  _SEND_TO_BTT COMMAND="Cap:BABYSTEPPING:1"
  _SEND_TO_BTT COMMAND="Cap:BUILD_PERCENT:1"  # M73 support
  _SEND_TO_BTT COMMAND="Cap:CHAMBER_TEMPERATURE:0"

[gcode_macro M118]
description: Serial print and parse BTT TouchScreenFirmware
  Send a message to the connected host for display in the host console or to perform a host action.
rename_existing: M118.1
gcode:
  {% set P = params.P | default(0) | int  %}
  {% set A = params.A | default(0) | int  %}
  {% set ACTION = params.ACTION | string  %}
  {% set NOTIFICATION = params.NOTIFICATION | string  %}
  {% set REMOTE = params.REMOTE | string  %}
  {% set PAUSE = params.PAUSE | string  %}
  {% set RESUME = params.RESUME | string  %}
  {% set CANCEL = params.CANCEL | string  %}

  {% if A == 1 and params.ACTION is defined and params.NOTIFICATION is defined and params.REMOTE is defined %}    
    {% if params.PAUSE is defined %}
      PAUSE
    {% endif %}
    {% if params.RESUME is defined %}
      RESUME
    {% endif %}
    {% if params.CANCEL is defined %}
      CANCEL_PRINT
    {% endif %}  
  {% else %}
    M118.1 {rawparams}
  {% endif %}

[gcode_macro M150]
description: Set RGB(W) Color
  If you have an RGB(W) light, either as part of a controller or installed separately, the M150 command can be used to set its color.
gcode:
  {% set INDEX = params.I | default(0)| int  %}
  {% set STRIPE = params.S | default(0)| int  %}
  {% set KEEP = params.K | default(0)| int  %}
  {% set RED = params.R | default(0)| int  %}
  {% set GREEN = params.U | default(0)| int  %}
  {% set BLUE = params.B | default(0)| int  %}
  {% set WHITE = params.W | default(0)| int  %}
  {% set BRIGHTNESS = params.P | default(255)| int  %}
  
  SET_LED LED=extruder RED={(RED / 255 * BRIGHTNESS / 255) | float} GREEN={(GREEN / 255 * BRIGHTNESS / 255) | float} BLUE={(BLUE / 255 * BRIGHTNESS / 255) | float } WHITE={(WHITE / 255 * BRIGHTNESS / 255) | float} TRANSMIT=1 SYNC=1 # [INDEX=<index>] 

[gcode_macro M154]
description: Position Auto-Report
variable_last_interval: 0
gcode:
  {% set INTERVAL = params.S | default(0) | float  %}

  SET_GCODE_VARIABLE MACRO=M154 VARIABLE=last_interval VALUE={INTERVAL}
  UPDATE_DELAYED_GCODE ID=_POS_AUTO_REPORT DURATION={INTERVAL}

[gcode_macro M155]
description: Temperature Auto-Report
variable_last_interval: 0
gcode:
  {% set INTERVAL = params.S | default(0) | float  %}

  SET_GCODE_VARIABLE MACRO=M155 VARIABLE=last_interval VALUE={INTERVAL}
  UPDATE_DELAYED_GCODE ID=_TEMP_AUTO_REPORT DURATION={INTERVAL}

[gcode_macro M201]
description: Print Move Limits
  Set the max acceleration for one or more axes (in current units-per-second squared)
gcode:
  {% set X = params.X | default(0)| float  %} #X axis max acceleration
  {% set Y = params.Y | default(0)| float  %} #Y axis max acceleration
  #{% set Z = params.Z | default(0)| float  %} #Z axis max acceleration
  #{% set E = params.E | default(0)| float  %} #E axis max acceleration

  {% if params.X is defined %}
    SET_VELOCITY_LIMIT ACCEL={X} ACCEL_TO_DECEL={X * 2 / 3}
  {% elif params.Y is defined %}
    SET_VELOCITY_LIMIT ACCEL={Y} ACCEL_TO_DECEL={Y * 2 / 3}
  {% endif %}

[gcode_macro M202]
description: Set Max Feedrate
  Set the max feedrate for one or more axes (in current units-per-second).
gcode:
  {% set X = params.X | default(0)| float  %} #X axis max feedrate 
  {% set Y = params.Y | default(0)| float  %} #Y axis max feedrate 
  #{% set Z = params.Z | default(printer.configfile.settings.printer.max_z_velocity)| float  %} #Z axis max feedrate 
  #{% set E = params.E | default(printer.configfile.settings.extruder.max_extrude_only_velocity)| float  %} #E axis max feedrate 

  {% if params.X is defined %}
    SET_VELOCITY_LIMIT VELOCITY={X} 
  {% elif params.Y is defined %}
    SET_VELOCITY_LIMIT VELOCITY={Y} 
  {% endif %}

[gcode_macro M206]
description: Set Home Offsets
  Use M206 to apply a persistent offset to the native home position and coordinate space. 
  This effectively shifts the coordinate space in the negative direction.
gcode:
  # M206 [P<offset>] [T<offset>] [X<offset>] [Y<offset>] [Z<offset>]
  {% set X = params.X | default(0)| float %} #A distance on the X axis
  {% set Y = params.Y | default(0)| float %} #A distance on the Y axis
  {% set Z = params.Z | default(0)| float %} #A distance on the Z axis

  {% if 'X' in params %}
    SET_GCODE_OFFSET X={X}
  {% endif %}
  {% if 'Y' in params %}
    SET_GCODE_OFFSET Y={Y}
  {% endif %}
  {% if 'Z' in params %}
    SET_GCODE_OFFSET Z={Z} 
  {% endif %}

[gcode_macro M211]
description: Software Endstops
  Optionally enable/disable software endstops, then report the current state.
  With software endstops enabled, moves will be clipped to the physical boundaries from [XYZ]_MIN_POS to [XYZ]_MAX_POS.
gcode:
# [S<flag>] Software endstops state (S1=enable S0=disable)
  _SEND_TO_BTT COMMAND="ON"

[gcode_macro M280]
description: Servo Position
  Set or get the position of a servo.
gcode:
  {% set INDEX = params.P | default(0)| int %}
  {% set POS = params.S | default(0)| int %}

  {% if POS == 10 %} # Deploy
    BLTOUCH_DEBUG COMMAND=pin_down
  {% elif POS == 90 %} # Stow
    BLTOUCH_DEBUG COMMAND=pin_up
  {% elif POS == 120 %} # Test
    QUERY_PROBE
    _SEND_TO_BTT MESSAGE="{"Last query: "~printer.probe.last_query}"
    _SEND_TO_BTT MESSAGE="{"Last Z result: "~printer.probe.last_z_result}"
  {% elif POS == 160 %} # Reset
    BLTOUCH_DEBUG COMMAND=reset
  {% endif %}

[gcode_macro M290]
description: Babystep
  Apply babysteps to one or more axes using current units. 
  Offsets applied with M290 arenâ€™t added to the current coordinates, but are intended for making small adjustments, 
  especially in the Z axis, at the start of a print.
gcode:
  {% set X = params.X | default(0)| float %} #A distance on the X axis
  {% set Y = params.Y | default(0)| float %} #A distance on the Y axis
  {% set Z = params.Z | default(0)| float %} #A distance on the Z axis
  {% set S = params.S | default(0)| float %} #Alias for Z

  SET_GCODE_OFFSET X_ADJUST={X} Y_ADJUST={Y} Z_ADJUST={Z} MOVE=1 MOVE_SPEED=10

[gcode_macro M303]
description: PID autotune
  This command initiates a process of heating and cooling to determine the proper PID values for the specified hotend or the heated bed.
gcode:
  {% set INDEX = params.E | default(0)| int  %}
  {% set COUNT = params.C | default(0)| int  %}
  {% set SAVE = params.U | default(0)| int  %}
  {% set TARGETTEMP = params.S | default(0)| float %}

  {% set HEATER = "extruder" %}
  {% if INDEX == -1 %}
    {% set HEATER = "heater_bed" %}
  {% endif %}

  PID_CALIBRATE HEATER={HEATER} TARGET={TARGETTEMP}

  {% if SAVE == 1 %}
    SAVE_CONFIG
  {% endif %}

[gcode_macro M420]
description: Bed Leveling State
  Get and/or set bed leveling state. For mesh-based leveling systems use Z parameter to set the Z Fade Height.
  With AUTO_BED_LEVELING_UBL you can use L to load a mesh from EEPROM.
gcode:
  {% set S = params.S | default(0)| int  %}

  {% if S == 1 %}
    BED_MESH_PROFILE LOAD=default
  {% else %}
    BED_MESH_CLEAR
  {% endif %}

[gcode_macro M500]
description: Save EEPROM Settings
  Save all configurable settings to EEPROM.
gcode:

  {% if printer.virtual_sdcard.is_active|lower =='true' or printer.pause_resume.is_paused|lower == 'true' %}
    _SEND_TO_BTT ERROR="Not saved - Printing"
  {% else %}  
    Z_OFFSET_APPLY_PROBE
    SAVE_CONFIG
  {% endif %}

[gcode_macro M501]
description: Restore EEPROM Settings
  Load all saved settings from EEPROM.
gcode:
  {% if printer.virtual_sdcard.is_active|lower =='true' or printer.pause_resume.is_paused|lower == 'true' %}
    _SEND_TO_BTT ERROR="Not restored - Printing"
  {% else %}  
    RESTART
  {% endif %}

[gcode_macro M502]
description: Factory EEPROM Reset
  Reset all configurable settings to their factory defaults.
  To also reset settings in EEPROM, follow with M500.
gcode:
  {% if printer.virtual_sdcard.is_active|lower =='true' or printer.pause_resume.is_paused|lower == 'true' %}
    _SEND_TO_BTT ERROR="Not reset - Printing"
  {% else %}  
    RESTART
  {% endif %}

[gcode_macro M503]
description: Report Settings
  Print a concise report of all runtime-configurable settings (in SRAM) to the host console. 
  This command reports the active settings which may or may not be the same as those stored in the EEPROM.
gcode:
  {% set SAVE = params.C | default(0)| int %}
  {% set DETAILED = params.S | default(0)| int %}  
  # Max feedrates (units/s):
  _SEND_TO_BTT COMMAND="M203 X{printer.toolhead.max_velocity} Y{printer.toolhead.max_velocity} Z{printer.configfile.settings.printer.max_z_velocity} E{printer.configfile.settings.extruder.max_extrude_only_velocity}"
  # Max Acceleration (units/s2):
  _SEND_TO_BTT COMMAND="M201 X{printer.toolhead.max_accel} Y{printer.toolhead.max_accel} Z{printer.configfile.settings.printer.max_z_accel} E{printer.configfile.settings.extruder.max_extrude_only_accel}"
  #Home offset
  _SEND_TO_BTT COMMAND="M206 X{printer.gcode_move.homing_origin.x} Y{printer.gcode_move.homing_origin.y} Z{printer.gcode_move.homing_origin.z}"
  #Z-Probe Offset
  _SEND_TO_BTT COMMAND="M851 X{printer.gcode_move.homing_origin.x} Y{printer.gcode_move.homing_origin.y} Z{printer.gcode_move.homing_origin.z}"
  #Auto Bed Leveling
  _SEND_TO_BTT COMMAND="M420 S1 Z{printer.configfile.settings.bed_mesh.fade_end}"
  # Fan Speed
  _SEND_TO_BTT COMMAND="M106 S{(printer.fan.speed*255) | int}"

  # Debug
  #M117 probe_offset X{printer.configfile.settings.probe.x_offset} Y{printer.configfile.settings.probe.y_offset} Z{printer.configfile.settings.probe.z_offset}
  M117 bltouch_offset X{printer.configfile.settings.bltouch.x_offset} Y{printer.configfile.settings.bltouch.y_offset} Z{printer.configfile.settings.bltouch.z_offset}
  M117 home_origin X{printer.gcode_move.homing_origin.x} Y{printer.gcode_move.homing_origin.z} Z{printer.gcode_move.homing_origin.z}

[gcode_macro M701]
description: Load filament  
gcode:
  {% set LENGTH = params.L | default(25)| float %}
  {% set EXTRUDER = params.T | default(0)| float %}
  {% set ZMOVE = params.Z | default(0)| float %}

  SAVE_GCODE_STATE NAME=M701_STATE

  G91 # Relative Positioning
  G92 E0 ; Reset Extruder
  G1 F450.0 Z{ZMOVE} E{LENGTH} ; Extrude
  G92 E0 ; Reset Extruder

  RESTORE_GCODE_STATE NAME=M701_STATE

[gcode_macro M702]
description: Unload filament  
gcode:
  {% set LENGTH = params.U | default(25)| float %}
  {% set EXTRUDER = params.T | default(0)| float %}
  {% set ZMOVE = params.Z | default(0)| float %}

  SAVE_GCODE_STATE NAME=M702_STATE

  G91 # Relative Positioning
  G92 E0 ; Reset Extruder
  G1 F450.0 Z{ZMOVE} E{(-1*LENGTH)} ; Retract
  G92 E0 ; Reset Extruder

  RESTORE_GCODE_STATE NAME=M702_STATE

[gcode_macro M851]
description: XYZ Probe Offset
  Set the XYZ distance from the nozzle to the probe trigger-point.
gcode:
  {% set X = params.X | default(0)| float %}
  {% set Y = params.Y | default(0)| float %}
  {% set Z = params.Z | default(0)| float %}

  _SEND_TO_BTT COMMAND="M851 X{printer.configfile.settings.bltouch.x_offset} Y{printer.configfile.settings.bltouch.y_offset} Z{printer.configfile.settings.bltouch.z_offset}"
  {% if 'X' in params %}
    SET_GCODE_OFFSET X={X} MOVE=1
  {% endif %}
  {% if 'Y' in params %}
    SET_GCODE_OFFSET Y={Y} MOVE=1
  {% endif %}
  {% if 'Z' in params %}
    SET_GCODE_OFFSET Z={Z} MOVE=1
  {% endif %}

[gcode_macro _SEND_TO_BTT]
description: Sends to the BigTreeTech TouchScreenFirmware
  Use parameter COMMAND to send a display Marlin Command  
  Use parameter ACTION to send a display action  
  Use paremter MESSAGE to send a user message
  Use paremter ERROR to send a user error
gcode:
  {% set COMMAND = params.COMMAND | string  %}
  {% set ACTION = params.ACTION | string  %}
  {% set MESSAGE = params.MESSAGE | string  %}
  {% set ERROR = params.ERROR | string  %}

  {% if params.COMMAND is defined %}
    RESPOND PREFIX="{COMMAND}"
  {% elif params.ACTION is defined %}
    RESPOND PREFIX="{"//action:" + ACTION}"
  {% elif params.MESSAGE is defined %}
    RESPOND TYPE=echo MSG="{MESSAGE}"
  {% elif params.ERROR is defined %}  
    RESPOND PREFIX="{"Error:" + ERROR}"
  {% endif %}

[gcode_macro _BTT_START]
gcode:
  _SEND_TO_BTT ACTION="print_start"

[gcode_macro _BTT_END]
gcode:
  _SEND_TO_BTT ACTION="print_end"

[gcode_macro _BTT_CANCEL]
gcode:
  _SEND_TO_BTT ACTION="cancel"

[gcode_macro _BTT_PAUSE]
gcode:
  _SEND_TO_BTT ACTION="pause"

[gcode_macro _BTT_RESUME]
gcode:
  _SEND_TO_BTT ACTION="resume"

[gcode_macro _BTT_NOTIFY_TIMELEFT]
gcode:
  {% set TIMELEFT = params.TIMELEFT | default("00h00m00s") | string  %}
  _SEND_TO_BTT ACTION="{"notification Time Left " ~ TIMELEFT}"

[gcode_macro _BTT_NOTIFY_LAYERLEFT]
gcode:
  {% set CURRENT_LAYER = params.CURRENT | default(0) | int  %}
  {% set MAX_LAYER = params.MAX | default(0) | int  %}
  _SEND_TO_BTT ACTION="{"notification Layer Left " ~ CURRENT_LAYER ~ "/" ~ MAX_LAYER}"

[gcode_macro _BTT_NOTIFY_DATALEFT]
gcode:
  {% set CURRENT_DATA = params.CURRENT | default(0) | int  %}
  {% set MAX_DATA = params.MAX | default(0) | int  %}

  _SEND_TO_BTT ACTION="{"notification Data Left " ~ CURRENT_DATA ~ "/" ~ MAX_DATA}"

[delayed_gcode _RESET_BTT]
initial_duration: 1.0
gcode:
  _BTT_END
  _SEND_TO_BTT MESSAGE="Klipper restarted"
  M503 # Update Display

[delayed_gcode _SD_STATUS_AUTO_REPORT]
gcode:
  M27
  UPDATE_DELAYED_GCODE ID=_SD_STATUS_AUTO_REPORT DURATION={printer["gcode_macro M27"].last_interval}

[delayed_gcode _POS_AUTO_REPORT]
gcode:
  M114 
  UPDATE_DELAYED_GCODE ID=_POS_AUTO_REPORT DURATION={printer["gcode_macro M154"].last_interval}

[delayed_gcode _TEMP_AUTO_REPORT]
gcode:
  M105
  UPDATE_DELAYED_GCODE ID=_TEMP_AUTO_REPORT DURATION={printer["gcode_macro M155"].last_interval}
